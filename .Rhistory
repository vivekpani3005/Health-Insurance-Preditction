)
#Bar Chart
count<- table(NewData$AgeGroup); count # A frequency table of AgeGroup is assigned to the object "count".
barplot(count, # barplot() creates a bar plot for the frequency table "count".
main="Bar Chart of Age Category", # title of the plot
xlab="Age Category", # x-axis label
ylab="Frequency",  # y-axis label
ylim=c(0,3500), # bounds for y-axis
border="red", col="lightblue") # colors for the bars and their borders
#Pie Chart
piepercent<- round(count/sum(count)*100, 1); piepercent # Frequencies in the table "count" is expressed as relative frequencies in percentage. The new table is assigned to the object "piepercent".
pie(piepercent, # pie() creates a pie chart of the object "piepercent"
labels=paste(piepercent,"%",sep=""), # adding labels (relative frequency(%)) for each section of the circle (category)
main="Pie Chart of Age Category", # title of the chart
col=rainbow(length(count))) # creating different colors to be used in the pie chart
legend("bottomleft", c("[10,20)","[20,30)","[30,40)","[40,50)","[50,60)","[60,70)","[70,80)","[80,90)"), cex=0.3,fill=rainbow(length(piepercent)))
#Clustered Bar Chart
count <- table(NewData$sex,NewData$AgeGroup); count # Frequency table of two variables is assigned to the object "count".
barplot(count, # Since "count" is a summary of two variables, barplot() creates separate bar plots for each row in "count" in the same chart.
main = "Bar Chart of Age Category",
xlab = "Age category", ylab = "Frequency",
col = c("blue", "red"),
legend.text = rownames(count), # The row labels in "count" can be used as legend for the bar plot.
ylim=c(0,2000),
beside = TRUE) # bars for the two bar plots are placed beside each other creating a clustered column chart. FALSE would place them on top of each other creating a stacked column chart.
#Histogram
hist(TenMileRace$net, # hist() creates a histogram
breaks=50, # Here we set the number of classes (ranges of numbers) to be defined to categorize the data
freq=TRUE,  #TRUE gives the histogram of frequencies. FALSE gives the histogram of relative frequencies.
main="Histogram of Recorded Time",
xlab="Net (seconds)",
ylab="Frequency",
#labels=TRUE, # This shows the frequencies on the bars.
xlim=c(2000,12000), # This determines the bounds for the x values shown in the plot.
ylim=c(0,850), # This determines the bounds for the y values shown in the plot.
col="grey",
border="red",
cex=1.2, cex.lab=1.2, cex.axis=1.2, # Number indicating the amount by which plotting text and symbols should be scaled relative to the default.
las=1, #rotate the axis values (always parallel to the axis (the default, 0), always horizontal (1), always perpendicular to the axis (2), and always vertical (3))
)
#Scatter Plot
plot(TenMileRace$age, TenMileRace$net, # plot() creates a scatter plot of two quantitative variables.
ylab="Net (seconds)",
xlab="Age",
col="black",
pch=16,  # This defines the point symbols. The pch stands for plot character.
cex=.2, cex.lab=1.2, cex.axis=1.2,
)
#Measures of Relative Standing
quantile(TenMileRace$age) # quantile finds the percentile for p=0,25,50,75,100.
quantile(TenMileRace$age, probs=c(0.4,0.25)) # Using probs=c() we can specify the value(s) p.
#Box Plot
boxplot(net~sex, data=TenMileRace, # The sign "~" shows that we need the box plot of the variable net for different categories of sex.
main="Boxplot of Net",
xlab="Net (seconds)",
ylab="Gender",
col="lightgreen",
horizontal=TRUE) # This changes the orientation.
#Box Plot
boxplot(net~sex, data=TenMileRace, # The sign "~" shows that we need the box plot of the variable net for different categories of sex.
main="Boxplot of Net",
xlab="Net (seconds)",
ylab="Gender",
col="lightgreen",
horizontal=TRUE) # This changes the orientation.
qnorm(0.44, 78, 6)
pnorm(77.55,78,6, lower.tail=F)
pnorm(77.55,78,6)
# 2 - Cross tabulation of sex and married
Crosstabulation <- addmargins(with(NewData,table(sex,married))); Crosstabulation
library(mosaicData)
library(dplyr)
names(CPS85) # will show all the columns in the data set
head(CPS85, 10) # will show the first 10 rows for all columns
str(CPS85) # will show data type of each variable(column)
summary(CPS85) # will show a summary statistics for all the variables in the data set
rm(list=ls()) # clear up the working environment
# 1 - frequency table for categorized wage
WageGroup = c()
for (i in 1:length(CPS85$wage)) {
WageGroup[i] <- {
if (CPS85$wage[i] >= 40) {"[40,50)"}
else if (CPS85$wage[i] >= 30) {"[30,40)"}
else if (CPS85$wage[i] >= 20) {"[20,30)"}
else if (CPS85$wage[i] >= 10) {"[10,20)"}
else {"[0,10)"}
}
}
NewData <- data.frame(CPS85, WageGroup)
# 2 - Cross tabulation of sex and married
Crosstabulation <- addmargins(with(NewData,table(sex,married))); Crosstabulation
FrequencyTable <- NewData %>%
group_by(WageGroup) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency)) %>%
na.omit(NewData$WageGroup); FrequencyTable
pnorm(77.55,78,6,lower.tail=F)
qnorm(0.44, 78, 1)
pnorm(-0.45,lower.tail=F)
pnorm( (77.55-78)/(6/sqrt(36), 0,1, lower.tail = F )
z <- (77.55-78)/(6/sqrt(36)
pnorm(z, 0,1, lower.tail = F )
z <- (77.55-78)
pnorm(z, 0,1, lower.tail = F )
# 9
1 - pbinom(2, 10, 0.37)    #1-P(X<=2)
# 9
1 - pbinom(2, 10, 0.32)    #1-P(X<=2)
# 10
pbinom(2,10,0.31)
# 11
1-ppois(2,5.22)
# 12
dpois(3,5.76)
#14
pexp(9.4, 0.21)-pexp(4.3, 0.21)
# 15
pnorm(4.7,6,2,lower.tail=FALSE)
qnorm(0.61,mu,sigma)
mu=6
sigma=2
qnorm(0.61,mu,sigma)
# 16
qnorm(0.94, 6, 2)
1-qnorm(0.06,6,2)
qnorm(0.06,6,2,lower.tail = F)
qnorm(0.44, mean = 78, sd = 1)
1-qnorm(0.56,78,1)
qnorm(0.40, mean = 78, sd = 1)
pnorm(76.85-78,lower.tail = F)
pnorm(-1.15,lower.tail = F)
# 19
qnorm(0.04,lower.tail = F)
# 20
qnorm(0.05,lower.tail=F)
# 22
2*pnorm(1.44,lower.tail = F)
# 23
pnorm(1.27,lower.tail = F)
library(mosaicData)
library(dplyr)
names(CPS85) # will show all the columns in the data set
head(CPS85, 10) # will show the first 10 rows for all columns
str(CPS85) # will show data type of each variable(column)
summary(CPS85) # will show a summary statistics for all the variables in the data set
rm(list=ls()) # clear up the working environment
# 1 - frequency table for categorized wage
WageGroup = c()
for (i in 1:length(CPS85$wage)) {
WageGroup[i] <- {
if (CPS85$wage[i] >= 40) {"[40,50)"}
else if (CPS85$wage[i] >= 30) {"[30,40)"}
else if (CPS85$wage[i] >= 20) {"[20,30)"}
else if (CPS85$wage[i] >= 10) {"[10,20)"}
else {"[0,10)"}
}
}
NewData <- data.frame(CPS85, WageGroup)
FrequencyTable <- NewData %>%
group_by(WageGroup) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency)) %>%
na.omit(NewData$WageGroup); FrequencyTable
# 2 - Cross tabulation of sex and married
Crosstabulation <- addmargins(with(NewData,table(sex,married))); Crosstabulation
# 3 - Scatter plot on wage and educ
plot(CPS85$wage, CPS85$educ,
xlab="Wage (US dollars per hour)",
ylab="No. of years of education",
col="blue",
pch=1,
cex=.5, cex.lab=1.2, cex.axis=1.2,
)
# 4 - 40th percentile and the quartiles for wages
quantile(CPS85$wage, probs=c(0.4,0,0.25,0.5,0.75,1))
# 5 - Coefficient of variation for wage
c.v<- sd(CPS85$wage)/mean(CPS85$wage); c.v
# 6 - Box plot for wages and two sexes
boxplot(wage~sex, data=CPS85,
main="Boxplot of Wage",
xlab="Wage (USD per hour)",
ylab="Gender",
col="lightblue",
horizontal=TRUE)
# 7 - Correlation coefficient between wage and education
cor(CPS85$wage, CPS85$educ)
# 9
1 - pbinom(2, 10, 0.32)  #1-P(X<=2)
# 10
pbinom(2,10,0.31)
# 11
1-ppois(2,5.22)
# 10
pbinom(2,10,0.31)
# 9
1 - pbinom(2, 10, 0.32)  #1-P(X<=2)
# 12
dpois(3,5.76)
#14
pexp(9.4, 0.21)-pexp(4.3, 0.21)
# 15
pnorm(4.7,6,2,lower.tail=FALSE)
# 15
pnorm(4.5,6,2,lower.tail=FALSE)
# 16
qnorm(0.94, 6, 2)
qnorm(0.06,6,2,lower.tail = F)
qnorm(0.40, mean = 78, sd = 1)
pnorm(-1.15,lower.tail = F)
# 19
qnorm(0.04,lower.tail = F)
# 20
qnorm(0.05,lower.tail=F)
# 22
2*pnorm(1.44,lower.tail = F)
# 23
pnorm(1.27,lower.tail = F)
n = 20
alpha = 0.05
ME = qnorm(1 - alpha/2)*sigma/sqrt(n)
# Example 3
xbar = 64.3
sigma = sqrt(225)
n = 20
alpha = 0.05
ME = qnorm(1 - alpha/2)*sigma/sqrt(n)
LL = xbar - ME; LL
UL = xbar + ME; UL
qnorm(1 - alpha/2)
qnorm(0.05)
#The hotel example
bills = c(306, 446, 276, 235, 295, 302, 374, 339, 624, 266, 497, 384, 429, 497, 224, 157, 248, 349, 388, 391, 266, 230, 621, 314, 344, 413, 267, 380, 225, 418, 257, 466, 230, 548, 277, 354, 271, 369, 275, 272)
zstat<-(mean(bills)-350)/(100/sqrt(length(bills)))
pnorm(abs(zstat),lower.tail = FALSE)*2 #p-value=2*P(Z>|z|)
#Part C
anova(lm3)
# Question 3: Chapter 8 - Exercises 26 and 27
head(ex0826)
require(Sleuth3)
require(mosaic)
require(knitr)
# Question 3: Chapter 8 - Exercises 26 and 27
head(ex0826)
#Part A
ex0826$MassPower=ex0826$Mass^(3/4)
ex0826$MassPower
plot(Metab~MassPower, data=ex0826, xlab="Mass Raise to 3/4", ylab="Metab",pch=16)
#Part B
lm3<- lm(Life~Metab, data=ex0826); summary(lm3)
#Part C
anova(lm3)
# Question 4: Chapter 9 - Exercise 14
head(ex0914)
#a
lm4 <- lm(Bank~Walk + Talk + Heart , data=ex0914); summary(lm4)$sigma
#b
#At the 95% Confidence Interval,the Variable talk is not significant.
#At 95% Confidence Interval,the Variables bank and walk are significant.
#The point on left of this plot does not conclude anything about the spread of residuals in that specific region.
#The information given here infers that this model is equal spread.
#c
H1Model<- lm(Bank~Walk + Talk + Heart , data=ex0914); summary(H1Model)
# Question 4: Chapter 9 - Exercise 14
head(ex0914)
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914)
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914); lm4
require(Sleuth3)
require(mosaic)
require(knitr)
# Question 4: Chapter 9 - Exercise 14
head(ex0914)
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914); lm4
#a
lm4 <- lm(Bank~Walk + Talk + Heart , data=ex0914); summary(lm4)$sigma
View(lm4)
lm5 <- lm(Bank ~ Walk + Talk + Heart , data=ex0914); lm5
View(lm4)
summary(lm4)
summary(lm5)
# Question 4: Chapter 9 - Exercise 14
head(ex0914)
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914); lm4
summary(lm4)
lm5 <- lm(Bank ~ Walk + Talk + Heart , data=ex0914); lm5
summary(lm5)
require(Sleuth3)
require(mosaic)
require(knitr)
# Question 4: Chapter 9 - Exercise 14
head(ex0914)
#Part A
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914); lm4
summary(lm4)
lm5 <- lm(Bank ~ Walk + Talk + Heart , data=ex0914); lm5
summary(lm5)
#Part B
H1Model<- lm(Heart ~ Bank + Walk + Talk , data=ex0914); summary(H1Model)
H0Model<- lm(Heart ~ Walk, data=ex0914); summary(H0Model)
anova(H0Model, H1Model)
#Part A
lm4 <- lm(Heart ~ Bank + Walk + Talk, data=ex0914); lm4
summary(lm4)
#a
lm4 <- lm(Bank~Walk + Talk + Heart , data=ex0914); summary(lm4)$sigma
lm5 <- lm(Bank ~ Walk + Talk + Heart , data=ex0914); lm5
summary(lm5)
---
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)  # Load necessary libraries
library(dplyr)
# Load the data
df <- read.csv('path/to/insurance.csv', header=TRUE)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
setwd("C:/Users/Vivek/OneDrive - The University of Texas at Dallas/Desktop/UT Dallas Coursework/Kaggle/Healthcare Data for Life Insurance")
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Explore the data
num_cols <- unlist(lapply(df, is.numeric))
plot(df[, num_cols])  # You should provide actual plot commands here
# Calculate correlations
correlation_matrix <- round(cor(df[, num_cols]), 2)
print(correlation_matrix)
# Create box plots
ggplot(df, aes(x = smoker, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Smoker Status")
ggplot(df, aes(x = sex, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Sex")
ggplot(df, aes(x = region, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Region")
# Build the linear regression model
model1 <- lm(charges ~ age + bmi + smoker + sex + region, data = df)
# Print the model summary
summary(model1)
# Build the linear regression model
model1 <- lm(charges ~ age + bmi + smoker + sex + children + region, data = df)
# Print the model summary
summary(model1)
# Build the linear regression model
model1 <- lm(charges ~. , data = df)
# Print the model summary
summary(model1)
---
title: "Price Prediction Model"
output: html_document
date: "2022-08-25"
---
# Load necessary libraries
library(caret)
---
# Load necessary libraries
library(caret)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Select significant predictor variables (replace these with your actual significant variables)
significant_vars <- c("age", "bmi", "smoker", "sex", "region")
# Create a new data frame with only the significant variables
df_significant <- df %>% select(significant_vars, charges)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(df_significant$charges, p = 0.7, list = FALSE)
train_data <- df_significant[trainIndex, ]
test_data <- df_significant[-trainIndex, ]
# Build the machine learning model (using linear regression as an example)
model <- lm(charges ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the model
mse <- mean((test_data$charges - predictions)^2)
rmse <- sqrt(mse)
r_squared <- 1 - (sum((test_data$charges - predictions)^2) / sum((test_data$charges - mean(test_data$charges))^2))
# Print evaluation metrics
cat("Mean Squared Error:", mse, "\n")
cat("Root Mean Squared Error:", rmse, "\n")
cat("R-squared:", r_squared, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)  # Load necessary libraries
library(dplyr)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Explore the data
num_cols <- unlist(lapply(df, is.numeric))
plot(df[, num_cols])  # You should provide actual plot commands here
# Calculate correlations
correlation_matrix <- round(cor(df[, num_cols]), 2)
print(correlation_matrix)
# Create box plots
ggplot(df, aes(x = smoker, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Smoker Status")
ggplot(df, aes(x = sex, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Sex")
ggplot(df, aes(x = region, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Region")
# Build the linear regression model
model1 <- lm(charges ~. , data = df)
# Print the model summary
summary(model1)
install.packages("shiny")
shiny::runApp('app')
runApp('app')
library(shiny)
runApp("path_to_your_app_directory")
library(shiny)
runApp("app")
library(shiny)
runApp("app.R")
library(shiny)
> runApp("app.R")
library(shiny)
runApp("app.R")
runApp("app.R")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp("app.R")
runApp('app')
library(shiny)
runApp("app.R")
runApp()
runApp(app.R)
runApp("app.R")
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
library(ggplot2)  # Load necessary libraries
library(dplyr)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Explore the data
num_cols <- unlist(lapply(df, is.numeric))
plot(df[, num_cols])  # You should provide actual plot commands here
# Calculate correlations
correlation_matrix <- round(cor(df[, num_cols]), 2)
print(correlation_matrix)
# Create box plots
ggplot(df, aes(x = smoker, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Smoker Status")
ggplot(df, aes(x = sex, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Sex")
ggplot(df, aes(x = region, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Region")
# Build the linear regression model
model1 <- lm(charges ~. , data = df)
# Print the model summary
summary(model1)
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
library(ggplot2)  # Load necessary libraries
library(dplyr)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Explore the data
num_cols <- unlist(lapply(df, is.numeric))
plot(df[, num_cols])  # You should provide actual plot commands here
# Calculate correlations
correlation_matrix <- round(cor(df[, num_cols]), 2)
print(correlation_matrix)
# Create box plots
ggplot(df, aes(x = smoker, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Smoker Status")
ggplot(df, aes(x = sex, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Sex")
ggplot(df, aes(x = region, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Region")
# Build the linear regression model
model1 <- lm(charges ~. , data = df)
# Print the model summary
summary(model1)
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
library(ggplot2)  # Load necessary libraries
library(dplyr)
# Load the data
df <- read.csv('insurance.csv', header=TRUE)
# Explore the data
num_cols <- unlist(lapply(df, is.numeric))
plot(df[, num_cols])  # You should provide actual plot commands here
# Calculate correlations
correlation_matrix <- round(cor(df[, num_cols]), 2)
print(correlation_matrix)
# Create box plots
ggplot(df, aes(x = smoker, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Smoker Status")
ggplot(df, aes(x = sex, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Sex")
ggplot(df, aes(x = region, y = charges)) +
geom_boxplot() +
labs(title = "Charges by Region")
# Build the linear regression model
model1 <- lm(charges ~. , data = df)
# Print the model summary
summary(model1)
runApp()
